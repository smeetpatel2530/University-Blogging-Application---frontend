{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:8080/api';\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add a request interceptor to add the auth token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Auth Service\nexport const authService = {\n  login: async credentials => {\n    const response = await api.post('/auth/login', credentials);\n    if (response.data.accessToken) {\n      localStorage.setItem('token', response.data.accessToken);\n      localStorage.setItem('user', JSON.stringify(response.data));\n    }\n    return response.data;\n  },\n  register: async userData => {\n    const response = await api.post('/auth/register', userData);\n    return response.data;\n  },\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  },\n  getCurrentUser: () => {\n    const userStr = localStorage.getItem('user');\n    if (userStr) return JSON.parse(userStr);\n    return null;\n  }\n};\n\n// Blog Service\nexport const blogService = {\n  getAllPosts: async () => {\n    const response = await api.get('/posts');\n    return response.data;\n  },\n  getPostById: async id => {\n    const response = await api.get(`/posts/${id}`);\n    return response.data;\n  },\n  getPostsByAuthor: async authorId => {\n    const response = await api.get(`/posts/author/${authorId}`);\n    return response.data;\n  },\n  createPost: async postData => {\n    const response = await api.post('/posts', postData);\n    return response.data;\n  },\n  updatePost: async (id, postData) => {\n    const response = await api.put(`/posts/${id}`, postData);\n    return response.data;\n  },\n  deletePost: async id => {\n    await api.delete(`/posts/${id}`);\n  },\n  likePost: async id => {\n    const response = await api.post(`/posts/${id}/like`);\n    return response.data;\n  },\n  searchPosts: async query => {\n    const response = await api.get(`/posts/search?query=${query}`);\n    return response.data;\n  }\n};\n\n// Comment Service\nexport const commentService = {\n  getCommentsByPost: async postId => {\n    const response = await api.get(`/posts/${postId}/comments`);\n    return response.data;\n  },\n  createComment: async (postId, commentData) => {\n    const response = await api.post(`/posts/${postId}/comments`, commentData);\n    return response.data;\n  },\n  updateComment: async (postId, commentId, commentData) => {\n    const response = await api.put(`/posts/${postId}/comments/${commentId}`, commentData);\n    return response.data;\n  },\n  deleteComment: async (postId, commentId) => {\n    await api.delete(`/posts/${postId}/comments/${commentId}`);\n  }\n};\n\n// User Service\nexport const userService = {\n  getCurrentUser: async () => {\n    const response = await api.get('/users/me');\n    return response.data;\n  },\n  getUserById: async id => {\n    const response = await api.get(`/users/${id}`);\n    return response.data;\n  },\n  updateProfile: async userData => {\n    const response = await api.put('/users/me', userData);\n    return response.data;\n  },\n  changePassword: async passwordData => {\n    await api.put('/users/change-password', passwordData);\n  },\n  getAllUsers: async () => {\n    const response = await api.get('/users');\n    return response.data;\n  },\n  updateUser: async (id, userData) => {\n    const response = await api.put(`/users/${id}`, userData);\n    return response.data;\n  },\n  deleteUser: async id => {\n    await api.delete(`/users/${id}`);\n  }\n};\n\n// File Upload Service\nexport const fileService = {\n  uploadFile: async file => {\n    const formData = new FormData();\n    formData.append('file', file);\n    const response = await api.post('/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","authService","login","credentials","response","post","data","accessToken","setItem","JSON","stringify","register","userData","logout","removeItem","getCurrentUser","userStr","parse","blogService","getAllPosts","get","getPostById","id","getPostsByAuthor","authorId","createPost","postData","updatePost","put","deletePost","delete","likePost","searchPosts","query","commentService","getCommentsByPost","postId","createComment","commentData","updateComment","commentId","deleteComment","userService","getUserById","updateProfile","changePassword","passwordData","getAllUsers","updateUser","deleteUser","fileService","uploadFile","file","formData","FormData","append"],"sources":["D:/University Blogging Application/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:8080/api';\n\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add a request interceptor to add the auth token to requests\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Auth Service\nexport const authService = {\n  login: async (credentials) => {\n    const response = await api.post('/auth/login', credentials);\n    if (response.data.accessToken) {\n      localStorage.setItem('token', response.data.accessToken);\n      localStorage.setItem('user', JSON.stringify(response.data));\n    }\n    return response.data;\n  },\n  \n  register: async (userData) => {\n    const response = await api.post('/auth/register', userData);\n    return response.data;\n  },\n  \n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  },\n  \n  getCurrentUser: () => {\n    const userStr = localStorage.getItem('user');\n    if (userStr) return JSON.parse(userStr);\n    return null;\n  }\n};\n\n// Blog Service\nexport const blogService = {\n  getAllPosts: async () => {\n    const response = await api.get('/posts');\n    return response.data;\n  },\n  \n  getPostById: async (id) => {\n    const response = await api.get(`/posts/${id}`);\n    return response.data;\n  },\n  \n  getPostsByAuthor: async (authorId) => {\n    const response = await api.get(`/posts/author/${authorId}`);\n    return response.data;\n  },\n  \n  createPost: async (postData) => {\n    const response = await api.post('/posts', postData);\n    return response.data;\n  },\n  \n  updatePost: async (id, postData) => {\n    const response = await api.put(`/posts/${id}`, postData);\n    return response.data;\n  },\n  \n  deletePost: async (id) => {\n    await api.delete(`/posts/${id}`);\n  },\n  \n  likePost: async (id) => {\n    const response = await api.post(`/posts/${id}/like`);\n    return response.data;\n  },\n  \n  searchPosts: async (query) => {\n    const response = await api.get(`/posts/search?query=${query}`);\n    return response.data;\n  }\n};\n\n// Comment Service\nexport const commentService = {\n  getCommentsByPost: async (postId) => {\n    const response = await api.get(`/posts/${postId}/comments`);\n    return response.data;\n  },\n  \n  createComment: async (postId, commentData) => {\n    const response = await api.post(`/posts/${postId}/comments`, commentData);\n    return response.data;\n  },\n  \n  updateComment: async (postId, commentId, commentData) => {\n    const response = await api.put(`/posts/${postId}/comments/${commentId}`, commentData);\n    return response.data;\n  },\n  \n  deleteComment: async (postId, commentId) => {\n    await api.delete(`/posts/${postId}/comments/${commentId}`);\n  }\n};\n\n// User Service\nexport const userService = {\n  getCurrentUser: async () => {\n    const response = await api.get('/users/me');\n    return response.data;\n  },\n  \n  getUserById: async (id) => {\n    const response = await api.get(`/users/${id}`);\n    return response.data;\n  },\n  \n  updateProfile: async (userData) => {\n    const response = await api.put('/users/me', userData);\n    return response.data;\n  },\n  \n  changePassword: async (passwordData) => {\n    await api.put('/users/change-password', passwordData);\n  },\n  \n  getAllUsers: async () => {\n    const response = await api.get('/users');\n    return response.data;\n  },\n  \n  updateUser: async (id, userData) => {\n    const response = await api.put(`/users/${id}`, userData);\n    return response.data;\n  },\n  \n  deleteUser: async (id) => {\n    await api.delete(`/users/${id}`);\n  }\n};\n\n// File Upload Service\nexport const fileService = {\n  uploadFile: async (file) => {\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    const response = await api.post('/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data;\n  }\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}