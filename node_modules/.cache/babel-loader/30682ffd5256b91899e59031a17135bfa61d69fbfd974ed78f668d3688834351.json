{"ast":null,"code":"var _jsxFileName = \"D:\\\\University Blogging Application\\\\frontend\\\\src\\\\pages\\\\Dashboard.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { Container, Row, Col, Tabs, Tab, Spinner } from 'react-bootstrap';\n// import { useAuth } from '../context/AuthContext';\n// import BlogEditor from '../components/BlogEditor';\n// import BlogPost from '../components/BlogPost';\n// import { blogService } from '../services/api';\n\n// function Dashboard() {\n//   const { currentUser } = useAuth();\n//   const [posts, setPosts] = useState([]);\n//   const [activeTab, setActiveTab] = useState('feed');\n//   const [isLoading, setIsLoading] = useState(true);\n\n//   useEffect(() => {\n//     fetchPosts();\n//   }, []);\n\n//   const fetchPosts = async () => {\n//     try {\n//       setIsLoading(true);\n//       const data = await blogService.getAllPosts();\n//       setPosts(data);\n//     } catch (error) {\n//       console.error('Failed to fetch posts:', error);\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   const handlePostCreated = async (postData) => {\n//     try {\n//       const newPost = await blogService.createPost(postData);\n//       setPosts([newPost, ...posts]);\n//     } catch (error) {\n//       console.error('Failed to create post:', error);\n//       throw error;\n//     }\n//   };\n\n//   const handleLike = async (postId) => {\n//     try {\n//       const updatedPost = await blogService.likePost(postId);\n//       setPosts(posts.map(post => post.id === postId ? updatedPost : post));\n//     } catch (error) {\n//       console.error('Failed to like post:', error);\n//     }\n//   };\n\n//   const handleComment = async (comment) => {\n//     // Comment is handled within CommentSection component\n//     fetchPosts(); // Refresh posts to get updated comment count\n//   };\n\n//   const myPosts = posts.filter(post => post.author?.id === currentUser?.id);\n\n//   return (\n//     <Container fluid className=\"py-4\">\n//       <Row>\n//         <Col lg={8} className=\"mx-auto\">\n//           <h2 className=\"mb-4\">Dashboard</h2>\n\n//           <Tabs\n//             activeKey={activeTab}\n//             onSelect={(k) => setActiveTab(k)}\n//             className=\"mb-3\"\n//           >\n//             <Tab eventKey=\"feed\" title=\"Feed\">\n//               <BlogEditor onPostCreated={handlePostCreated} />\n\n//               {isLoading ? (\n//                 <div className=\"text-center my-5\">\n//                   <Spinner animation=\"border\" role=\"status\">\n//                     <span className=\"visually-hidden\">Loading...</span>\n//                   </Spinner>\n//                 </div>\n//               ) : posts.length > 0 ? (\n//                 posts.map(post => (\n//                   <BlogPost\n//                     key={post.id}\n//                     post={post}\n//                     onLike={handleLike}\n//                     onComment={handleComment}\n//                     currentUser={currentUser}\n//                   />\n//                 ))\n//               ) : (\n//                 <div className=\"text-center py-5\">\n//                   <h4>No posts yet</h4>\n//                   <p>Be the first to create a post!</p>\n//                 </div>\n//               )}\n//             </Tab>\n\n//             <Tab eventKey=\"my-posts\" title=\"My Posts\">\n//               <h4 className=\"mb-3\">My Posts</h4>\n//               {myPosts.length > 0 ? (\n//                 myPosts.map(post => (\n//                   <BlogPost\n//                     key={post.id}\n//                     post={post}\n//                     onLike={handleLike}\n//                     onComment={handleComment}\n//                     currentUser={currentUser}\n//                   />\n//                 ))\n//               ) : (\n//                 <div className=\"text-center py-5\">\n//                   <h4>You haven't created any posts yet</h4>\n//                   <p>Create your first post to get started!</p>\n//                 </div>\n//               )}\n//             </Tab>\n//           </Tabs>\n//         </Col>\n//       </Row>\n//     </Container>\n//   );\n// }\n\n// export default Dashboard;\n\nimport React, { useState, useEffect } from 'react';\nimport { Container, Row, Col, Tabs, Tab, Spinner } from 'react-bootstrap';\nimport { useAuth } from '../context/AuthContext';\nimport BlogEditor from '../components/BlogEditor';\nimport BlogPost from '../components/BlogPost';\nimport { blogService } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Dashboard() {\n  _s();\n  const {\n    currentUser\n  } = useAuth();\n  const [posts, setPosts] = useState([]);\n  const [myPosts, setMyPosts] = useState([]);\n  const [activeTab, setActiveTab] = useState('feed');\n  const [isLoading, setIsLoading] = useState(true);\n\n  // === THIS IS THE CORRECTED LOGIC ===\n  // This useEffect will now run only when `currentUser` has been loaded,\n  // preventing the \"cannot read properties of undefined\" error.\n  useEffect(() => {\n    if (currentUser) {\n      fetchPosts();\n    }\n  }, [currentUser]); // The dependency on currentUser is the key to the fix.\n\n  const fetchPosts = async () => {\n    try {\n      setIsLoading(true);\n      const data = await blogService.getAllPosts();\n      setPosts(data);\n      // This filter is now safe because we know currentUser exists\n      if (currentUser) {\n        setMyPosts(data.filter(post => {\n          var _post$author;\n          return ((_post$author = post.author) === null || _post$author === void 0 ? void 0 : _post$author.id) === currentUser.id;\n        }));\n      }\n    } catch (error) {\n      console.error('Failed to fetch posts:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handlePostCreated = () => {\n    // Simply refetch all posts to get the new one.\n    fetchPosts();\n    // Switch to the \"My Posts\" tab to show the new post\n    setActiveTab('my-posts');\n  };\n  const handleLike = async postId => {\n    // This function handles the \"like\" action optimistically for a faster UI response.\n    const originalPosts = [...posts];\n    const updatedPosts = posts.map(p => {\n      if (p.id === postId) {\n        const isLiked = p.likedByUserIds.includes(currentUser === null || currentUser === void 0 ? void 0 : currentUser.id);\n        const newLikedIds = isLiked ? p.likedByUserIds.filter(id => id !== currentUser.id) : [...p.likedByUserIds, currentUser.id];\n        return {\n          ...p,\n          likedByUserIds: newLikedIds,\n          likeCount: newLikedIds.length\n        };\n      }\n      return p;\n    });\n    setPosts(updatedPosts);\n    if (currentUser) {\n      setMyPosts(updatedPosts.filter(post => {\n        var _post$author2;\n        return ((_post$author2 = post.author) === null || _post$author2 === void 0 ? void 0 : _post$author2.id) === currentUser.id;\n      }));\n    }\n\n    // Actual API call in the background\n    try {\n      await blogService.likePost(postId);\n    } catch (error) {\n      console.error('Failed to like post:', error);\n      // If the API call fails, revert to the original state\n      setPosts(originalPosts);\n      if (currentUser) {\n        setMyPosts(originalPosts.filter(post => {\n          var _post$author3;\n          return ((_post$author3 = post.author) === null || _post$author3 === void 0 ? void 0 : _post$author3.id) === currentUser.id;\n        }));\n      }\n    }\n  };\n  const handleComment = () => {\n    // Re-fetch posts to get the latest comment count\n    fetchPosts();\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    fluid: true,\n    className: \"py-4\",\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        lg: 8,\n        className: \"mx-auto\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"mb-4\",\n          children: \"Dashboard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tabs, {\n          activeKey: activeTab,\n          onSelect: k => setActiveTab(k),\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(Tab, {\n            eventKey: \"feed\",\n            title: \"Create Post\",\n            children: /*#__PURE__*/_jsxDEV(BlogEditor, {\n              onPostCreated: handlePostCreated\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tab, {\n            eventKey: \"my-posts\",\n            title: \"My Posts\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              className: \"my-4\",\n              children: \"My Posts\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 15\n            }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-center my-5\",\n              children: /*#__PURE__*/_jsxDEV(Spinner, {\n                animation: \"border\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 222,\n                columnNumber: 52\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 18\n            }, this) : myPosts.length > 0 ? myPosts.map(post => /*#__PURE__*/_jsxDEV(BlogPost, {\n              post: post,\n              onLike: handleLike,\n              onComment: handleComment,\n              currentUser: currentUser\n            }, post.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 19\n            }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-center py-5\",\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                children: \"You haven't created any posts yet\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 235,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Create your first post to get started!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 236,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 5\n  }, this);\n}\n_s(Dashboard, \"+R/BGKPLiAERpG05Hr55WlF7+Gg=\", false, function () {\n  return [useAuth];\n});\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","Container","Row","Col","Tabs","Tab","Spinner","useAuth","BlogEditor","BlogPost","blogService","jsxDEV","_jsxDEV","Dashboard","_s","currentUser","posts","setPosts","myPosts","setMyPosts","activeTab","setActiveTab","isLoading","setIsLoading","fetchPosts","data","getAllPosts","filter","post","_post$author","author","id","error","console","handlePostCreated","handleLike","postId","originalPosts","updatedPosts","map","p","isLiked","likedByUserIds","includes","newLikedIds","likeCount","length","_post$author2","likePost","_post$author3","handleComment","fluid","className","children","lg","fileName","_jsxFileName","lineNumber","columnNumber","activeKey","onSelect","k","eventKey","title","onPostCreated","animation","onLike","onComment","_c","$RefreshReg$"],"sources":["D:/University Blogging Application/frontend/src/pages/Dashboard.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import { Container, Row, Col, Tabs, Tab, Spinner } from 'react-bootstrap';\n// import { useAuth } from '../context/AuthContext';\n// import BlogEditor from '../components/BlogEditor';\n// import BlogPost from '../components/BlogPost';\n// import { blogService } from '../services/api';\n\n// function Dashboard() {\n//   const { currentUser } = useAuth();\n//   const [posts, setPosts] = useState([]);\n//   const [activeTab, setActiveTab] = useState('feed');\n//   const [isLoading, setIsLoading] = useState(true);\n\n//   useEffect(() => {\n//     fetchPosts();\n//   }, []);\n\n//   const fetchPosts = async () => {\n//     try {\n//       setIsLoading(true);\n//       const data = await blogService.getAllPosts();\n//       setPosts(data);\n//     } catch (error) {\n//       console.error('Failed to fetch posts:', error);\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   const handlePostCreated = async (postData) => {\n//     try {\n//       const newPost = await blogService.createPost(postData);\n//       setPosts([newPost, ...posts]);\n//     } catch (error) {\n//       console.error('Failed to create post:', error);\n//       throw error;\n//     }\n//   };\n\n//   const handleLike = async (postId) => {\n//     try {\n//       const updatedPost = await blogService.likePost(postId);\n//       setPosts(posts.map(post => post.id === postId ? updatedPost : post));\n//     } catch (error) {\n//       console.error('Failed to like post:', error);\n//     }\n//   };\n\n//   const handleComment = async (comment) => {\n//     // Comment is handled within CommentSection component\n//     fetchPosts(); // Refresh posts to get updated comment count\n//   };\n\n//   const myPosts = posts.filter(post => post.author?.id === currentUser?.id);\n\n//   return (\n//     <Container fluid className=\"py-4\">\n//       <Row>\n//         <Col lg={8} className=\"mx-auto\">\n//           <h2 className=\"mb-4\">Dashboard</h2>\n          \n//           <Tabs\n//             activeKey={activeTab}\n//             onSelect={(k) => setActiveTab(k)}\n//             className=\"mb-3\"\n//           >\n//             <Tab eventKey=\"feed\" title=\"Feed\">\n//               <BlogEditor onPostCreated={handlePostCreated} />\n              \n//               {isLoading ? (\n//                 <div className=\"text-center my-5\">\n//                   <Spinner animation=\"border\" role=\"status\">\n//                     <span className=\"visually-hidden\">Loading...</span>\n//                   </Spinner>\n//                 </div>\n//               ) : posts.length > 0 ? (\n//                 posts.map(post => (\n//                   <BlogPost\n//                     key={post.id}\n//                     post={post}\n//                     onLike={handleLike}\n//                     onComment={handleComment}\n//                     currentUser={currentUser}\n//                   />\n//                 ))\n//               ) : (\n//                 <div className=\"text-center py-5\">\n//                   <h4>No posts yet</h4>\n//                   <p>Be the first to create a post!</p>\n//                 </div>\n//               )}\n//             </Tab>\n            \n//             <Tab eventKey=\"my-posts\" title=\"My Posts\">\n//               <h4 className=\"mb-3\">My Posts</h4>\n//               {myPosts.length > 0 ? (\n//                 myPosts.map(post => (\n//                   <BlogPost\n//                     key={post.id}\n//                     post={post}\n//                     onLike={handleLike}\n//                     onComment={handleComment}\n//                     currentUser={currentUser}\n//                   />\n//                 ))\n//               ) : (\n//                 <div className=\"text-center py-5\">\n//                   <h4>You haven't created any posts yet</h4>\n//                   <p>Create your first post to get started!</p>\n//                 </div>\n//               )}\n//             </Tab>\n//           </Tabs>\n//         </Col>\n//       </Row>\n//     </Container>\n//   );\n// }\n\n// export default Dashboard;\n\nimport React, { useState, useEffect } from 'react';\nimport { Container, Row, Col, Tabs, Tab, Spinner } from 'react-bootstrap';\nimport { useAuth } from '../context/AuthContext';\nimport BlogEditor from '../components/BlogEditor';\nimport BlogPost from '../components/BlogPost';\nimport { blogService } from '../services/api';\n\nfunction Dashboard() {\n  const { currentUser } = useAuth();\n  const [posts, setPosts] = useState([]);\n  const [myPosts, setMyPosts] = useState([]);\n  const [activeTab, setActiveTab] = useState('feed');\n  const [isLoading, setIsLoading] = useState(true);\n\n  // === THIS IS THE CORRECTED LOGIC ===\n  // This useEffect will now run only when `currentUser` has been loaded,\n  // preventing the \"cannot read properties of undefined\" error.\n  useEffect(() => {\n    if (currentUser) {\n      fetchPosts();\n    }\n  }, [currentUser]); // The dependency on currentUser is the key to the fix.\n\n  const fetchPosts = async () => {\n    try {\n      setIsLoading(true);\n      const data = await blogService.getAllPosts();\n      setPosts(data);\n      // This filter is now safe because we know currentUser exists\n      if (currentUser) {\n        setMyPosts(data.filter(post => post.author?.id === currentUser.id));\n      }\n    } catch (error) {\n      console.error('Failed to fetch posts:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handlePostCreated = () => {\n    // Simply refetch all posts to get the new one.\n    fetchPosts();\n    // Switch to the \"My Posts\" tab to show the new post\n    setActiveTab('my-posts');\n  };\n\n  const handleLike = async (postId) => {\n    // This function handles the \"like\" action optimistically for a faster UI response.\n    const originalPosts = [...posts];\n    const updatedPosts = posts.map(p => {\n        if (p.id === postId) {\n            const isLiked = p.likedByUserIds.includes(currentUser?.id);\n            const newLikedIds = isLiked \n                ? p.likedByUserIds.filter(id => id !== currentUser.id)\n                : [...p.likedByUserIds, currentUser.id];\n            return { ...p, likedByUserIds: newLikedIds, likeCount: newLikedIds.length };\n        }\n        return p;\n    });\n    setPosts(updatedPosts);\n    if(currentUser){\n        setMyPosts(updatedPosts.filter(post => post.author?.id === currentUser.id));\n    }\n\n    // Actual API call in the background\n    try {\n        await blogService.likePost(postId);\n    } catch (error) {\n        console.error('Failed to like post:', error);\n        // If the API call fails, revert to the original state\n        setPosts(originalPosts);\n        if(currentUser){\n            setMyPosts(originalPosts.filter(post => post.author?.id === currentUser.id));\n        }\n    }\n  };\n\n  const handleComment = () => {\n    // Re-fetch posts to get the latest comment count\n    fetchPosts(); \n  };\n\n  return (\n    <Container fluid className=\"py-4\">\n      <Row>\n        <Col lg={8} className=\"mx-auto\">\n          <h2 className=\"mb-4\">Dashboard</h2>\n          \n          <Tabs\n            activeKey={activeTab}\n            onSelect={(k) => setActiveTab(k)}\n            className=\"mb-3\"\n          >\n            <Tab eventKey=\"feed\" title=\"Create Post\">\n              <BlogEditor onPostCreated={handlePostCreated} />\n            </Tab>\n            \n            <Tab eventKey=\"my-posts\" title=\"My Posts\">\n              <h4 className=\"my-4\">My Posts</h4>\n              {isLoading ? (\n                 <div className=\"text-center my-5\"><Spinner animation=\"border\" /></div>\n              ) : myPosts.length > 0 ? (\n                myPosts.map(post => (\n                  <BlogPost\n                    key={post.id}\n                    post={post}\n                    onLike={handleLike}\n                    onComment={handleComment}\n                    currentUser={currentUser}\n                  />\n                ))\n              ) : (\n                <div className=\"text-center py-5\">\n                  <h4>You haven't created any posts yet</h4>\n                  <p>Create your first post to get started!</p>\n                </div>\n              )}\n            </Tab>\n          </Tabs>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default Dashboard;\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}